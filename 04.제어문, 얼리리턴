# 1. 제어문
1. 제어문이란 조건에 따라서 소스코드의 실행여부를 결정할 수 있는 구문이다.
2. 제어문에는 조건문과 반복문이 존재한다. 조건문은 조건에 따라서
    소스코드의 실행여부를 경정해주는 구문이고 반복문은 조건에 따라서 소스코드의 반복실행여부를 결정하는 구문.
3. 조건문과반복문 모두 조건이 true일 경우에 소스코드를 실행하거나 반복 실행한다.
4. 조건문에는 if, if~else if, if~else, if~else, switch ~ case 문이 존재한다.
5. 반복문에는 for, while, do~whil문이 존재한다.

# 2. 조건문
1. if(조건) : 괄호 안 조건이 true일 경우에만 {}블록의 소스코드를 실행시킨다.
ex) if(10 > 5){ System.out.println("true");} 
- {} 블록 안의 소스코드가 한 줄이면 {}를 생략할 수 있다. 여러 줄일 경우 {} 필수. else if, else도 동일하게 적용
ex) if(10>5)
 system.out.println("aa");
 if(10>5){
    System.out.println("aa");
    System.out.println("bb");
 }
2. if(조건1) ~ else if(조건2) : 
조건 1이 true일 경우 if문 아래의 소스코드 실행. 조건1이 false일 경우 
조건 2가 true인지 false인지 판단.
조건 1이 false면서 조건 2가 true일 경우 else if 구문의 소스코드가 실행
3. if의 조건과 else if의 조건은 연관된 조건이어야 한다.
ex) int score = 85;
    if(score > 90){System.out.println("A");
    } else if((생략되어 있음score > 90&&)score >= 80){System.out.println("B");
    }
4. 연관되지 않은 조건을 사용할 때 따로 if문을 생성해서 사용한다.

5. else if문은 if문 없이 독립적으로 사용할 수 없어서 항상 if문과 함께 사용해야함.
6. if(조건1)~else if(조건2)~else,
    if(조건1)~else : else구문 위의 모든 조건이 false일 때 else 구문의 소스코드가 실행
7. else구문은 모든 조건에서 벗어난 예외 상황이기 때문에 조건을 작성하지 않는다.
ex)int socre = 65;
if(score >=90){
    system.out.println("A");
}else if(score >=80){
    system.out.println("B");
}else{
    system.out.println("A가 아님");
}
}
https://devscb.tistory.com/130 = 얼리리턴 참고
8. switch~case : 변수의 상태가 현재 값을  조건으로 나눠서 처리할 수 있는 조건문.
ex) int num = 3;
switch(num){
        case 1 ://num이 1일 때 동작
    sosy("num은 1");
        break; //switch 종료
    case 2 : 
        syso("num은 2");
        break;
    case 3 : 
        syso("num은 3");
        break;
     default : //위의 조건이 다 아닐 때 동작
        syso("num이 3보다 큼");
        break;
}
 - 공통 코드를 사용할 때 주로 사용된다.
 ex) switch(commonCode) { 
    Case "P" : //결제요청상태
    Case "A" : //결재승인상태
    Case "R" : //결재반려상태
    }

# 3. 반복문
1. 조건이 true일 동안 소스코드를 계속 반복실행해주는 구문
2. for, while, do~while 구문이 존재함.
3. for() 구문: 초기화식과 조건식 그리고 증감식을 사용하여 
초기화식에서 선언한 변수의 값으로 조건을 따져 조건이 true일 동안 계속 반복되는 반복문
ex) for(초기화 식; 조건식(true일 동안 반복);)
초기화식의 변수 증감식 {
    //조건식이 true일 동안 반복될 소스코드
}
1 ~ 10까지의 합 : 
int sum = 0;
sum += 1;
sum += 2;
sum += 3;
...
sum += 10;
for(int i = 1; i <=10; i++)
{ sum += i;
}

for구문을 만나면 초기화식이 먼저 실행(i라는 변수가 만들어지고 1이 저장됨)
-> 조건식으로 가서 조건을 판단(1이 10보다 작거나 같기 때문에 true) -> 
for문 안의 소스코드가 실행 -> 소스코드 실행이 완료되면 증감식으로 간다. ->
증감식을 거쳐서 다시 조건식으로 가고 조건식이 true면 다시 소스코드를 실행->
증감식 후에 조건식에서 false가 나올 때 까지 반복된다.
